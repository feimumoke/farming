#!/bin/bash

# args:
# -a : machine arch, support linux, mac, windows, linux as default.
# -e : build environment, support prod, dev. dev as default.
# -v : enable vendor build mode, support enable,disable. disable as default.
# -d : use build tools in docker or local, support yes or no. no as default.
# -c : cross compile, support yes use x86_64-linux-musl-gcc
# 0: check env
set -e # so that script terminates when error occurs
while getopts "a:e:v:d:c:" arg; do
    # shellcheck disable=SC2220
    case ${arg} in
    a)
        system=${OPTARG}
        ;;
    e)
        build_env=${OPTARG}
        ;;
    v)
        vendor_build=${OPTARG}
        ;;
    d)
        docker_build=${OPTARG}
        ;;
    c)
        musl_cross=${OPTARG}
        ;;
    esac
done

echo "Build for project ${PROJECT_NAME}"
BASE_PATH=$(
    cd "$(dirname "$0")" || exit
    pwd
)
CODE_PATH=${BASE_PATH}/..
cd "${CODE_PATH}"

if [ -z "${system}" ]; then
    GS=$(uname -s)
    case "${GS}" in
    Linux) GS="linux" ;;
    Darwin) GS="darwin" ;;
    FreeBSD) GS="freebsd" ;;
    *) echo "Your Operating System -> ITS NOT SUPPORTED" ;;
    esac
else
    if [ "${system}" = "windows" ]; then
        GS="windows"
    elif [ "${system}" = "mac" ]; then
        GS="darwin"
    elif [ "${system}" = "linux" ]; then
        GS="linux"
    else
        GS="linux"
    fi
fi

if [ -z "${build_env}" ]; then
    BUILD_ENV="dev"
else
    if [ "${build_env}" = "dev" ] || [ "${build_env}" = "prod" ]; then
        BUILD_ENV=${build_env}
    else
        BUILD_ENV="dev"
    fi
fi

if [[ ${PROJECT_NAME} == server* ]]; then
    ENTRYPOINT="server/app_entry_point/${PROJECT_NAME#*-}/main.go"
elif [[ ${PROJECT_NAME} == service* ]]; then
    ENTRYPOINT="service/app_entry_point/${PROJECT_NAME#*-}/main.go"
else
    echo "PROJECT_NAME NOT LEGAL ${PROJECT_NAME}"
    exit 1
fi

echo "machine env: "${GS}
echo "build env: "${BUILD_ENV}
# 1: Declare to project root
echo "Step 1: Declare ENV ..."
# shellcheck disable=SC2046
# take advantage of xargs construct arguments separated by space
export $(grep -E -v '^#' "${BASE_PATH}"/../.env | xargs)

if [ -z "${PROJECT_NAME}" ]; then
    PROJECT_NAME="pulse_line_demo"
fi

echo "PROJECT_NAME = ${PROJECT_NAME}"

echo "Step 2: Generate required files using protocol buffer"

if [ -z "${docker_build}" ]; then
    docker_build_flag=""
else
    docker_build_flag="-d"
fi

#sh "$BASE_PATH"/pb_gen.sh "${docker_build_flag}" "${docker_build}"

# go mod init
if [ -z "${vendor_build}" ]; then
    vendor_build="disable"
fi

if [ ${vendor_build} = "enable" ]; then
    echo "Step 3: skip go mod"
else
    echo "Step 3: go mod to init dependencies"
    go mod download
    rm -rf "${BASE_PATH}"/../vendor
    go mod vendor
fi

# 4: Build main file
echo "Step 4.1: Build main file ..."
mkdir -p build_tmp
if [ "${musl_cross}" = "yes" ]; then
    GS="linux"
    CROSS_COMP="CC=x86_64-linux-musl-gcc"
else
    CROSS_COMP=""
fi
if [ ${vendor_build} = "disable" ]; then
    BUILD_CMD="GOOS=${GS} GOARCH=amd64 ${CROSS_COMP} go build -o ./build_tmp/${PROJECT_NAME} ${ENTRYPOINT}"
    echo "${BUILD_CMD}"
    eval "${BUILD_CMD}"
else
    BUILD_CMD="GOOS=${GS} GOARCH=amd64 ${CROSS_COMP} go build -mod=vendor -o ./build_tmp/${PROJECT_NAME} ${ENTRYPOINT}"
    echo "${BUILD_CMD}"
    eval "${BUILD_CMD}"
fi

# 4.1 Construct k8s yaml file
echo "Step 4.2: Build manifests"

sh "$BASE_PATH"/kustomize.sh "${docker_build_flag}" "${docker_build}"
# rename files generated by Kustomize since they have low readability.
sh "$BASE_PATH"/manifests_rename.sh

# 5: Make target package
echo "Step 5: Make target package ..."
rm -rf target

mkdir target \
    target/${PROJECT_NAME}
mkdir target/${PROJECT_NAME}/bin \
    target/${PROJECT_NAME}/log \
    target/${PROJECT_NAME}/configs

# 6: Copy related files to target folder
echo "Step 6: Copy related files to target folder..."
mv ./build_tmp/${PROJECT_NAME} target/${PROJECT_NAME}/bin/${PROJECT_NAME}
rm -rf build_tmp

chmod +x target/${PROJECT_NAME}/bin/*
cp -r bin/* target/${PROJECT_NAME}/bin/
cp .env target/${PROJECT_NAME}/
# if configs folder is not empty
if [ -n "$(ls configs)" ]; then
    cp -r configs/* target/${PROJECT_NAME}/configs/
fi
