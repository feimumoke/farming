// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FarmerServiceClient is the client API for FarmerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmerServiceClient interface {
	SelectFarmer(ctx context.Context, in *FarmerReq, opts ...grpc.CallOption) (*FarmerRsp, error)
	HelpFarmer(ctx context.Context, in *HelpFarmerReq, opts ...grpc.CallOption) (*HelpFarmerRsp, error)
}

type farmerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmerServiceClient(cc grpc.ClientConnInterface) FarmerServiceClient {
	return &farmerServiceClient{cc}
}

func (c *farmerServiceClient) SelectFarmer(ctx context.Context, in *FarmerReq, opts ...grpc.CallOption) (*FarmerRsp, error) {
	out := new(FarmerRsp)
	err := c.cc.Invoke(ctx, "/server.FarmerService/SelectFarmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerServiceClient) HelpFarmer(ctx context.Context, in *HelpFarmerReq, opts ...grpc.CallOption) (*HelpFarmerRsp, error) {
	out := new(HelpFarmerRsp)
	err := c.cc.Invoke(ctx, "/server.FarmerService/HelpFarmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmerServiceServer is the server API for FarmerService service.
// All implementations must embed UnimplementedFarmerServiceServer
// for forward compatibility
type FarmerServiceServer interface {
	SelectFarmer(context.Context, *FarmerReq) (*FarmerRsp, error)
	HelpFarmer(context.Context, *HelpFarmerReq) (*HelpFarmerRsp, error)
	mustEmbedUnimplementedFarmerServiceServer()
}

// UnimplementedFarmerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFarmerServiceServer struct {
}

func (UnimplementedFarmerServiceServer) SelectFarmer(context.Context, *FarmerReq) (*FarmerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectFarmer not implemented")
}
func (UnimplementedFarmerServiceServer) HelpFarmer(context.Context, *HelpFarmerReq) (*HelpFarmerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpFarmer not implemented")
}
func (UnimplementedFarmerServiceServer) mustEmbedUnimplementedFarmerServiceServer() {}

// UnsafeFarmerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmerServiceServer will
// result in compilation errors.
type UnsafeFarmerServiceServer interface {
	mustEmbedUnimplementedFarmerServiceServer()
}

func RegisterFarmerServiceServer(s grpc.ServiceRegistrar, srv FarmerServiceServer) {
	s.RegisterService(&FarmerService_ServiceDesc, srv)
}

func _FarmerService_SelectFarmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServiceServer).SelectFarmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.FarmerService/SelectFarmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServiceServer).SelectFarmer(ctx, req.(*FarmerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmerService_HelpFarmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpFarmerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerServiceServer).HelpFarmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.FarmerService/HelpFarmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerServiceServer).HelpFarmer(ctx, req.(*HelpFarmerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmerService_ServiceDesc is the grpc.ServiceDesc for FarmerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.FarmerService",
	HandlerType: (*FarmerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectFarmer",
			Handler:    _FarmerService_SelectFarmer_Handler,
		},
		{
			MethodName: "HelpFarmer",
			Handler:    _FarmerService_HelpFarmer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "farmer.proto",
}
